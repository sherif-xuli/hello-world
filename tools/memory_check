#!/usr/bin/env python
'''Name: memory check tools
   Author: xuli
   Time: 2018-01-18 20:14
'''
import commands as cmd
def get_memory_info():
    ( status , output ) = cmd.getstatusoutput( 'dmidecode -t memory |  \
                                                grep -A17 "Array Handle" |  \
                                                grep -vE "Asset Tag|Set" | \
                                                sed -r "s%(Dimm[0-9]_(SerNum|PartNum|Manufacturer)|No Module Installed|Unknown|NO DIMM)%N/A%g" | \
                                                sed -r "s/Configured Clock Speed/wrk_speed/g" |\
                                                sed -r "s/Semiconductor//g" |\
                                                sed -r "s/Error Information Handle/err_info_hand/g" | \
                                                sed -r "s/([a-zA-Z][0-9])_Node([0-9])_Channel([0-9])_Dimm([0-9])/\\1_N\\2_C\\3_D\\4/g"' )
    if status  ==  0 :
        modules_region = output.split( '\n--\n' )
        modules = []
        for module in modules_region:
            items = module.split( '\n' )
            current_module = {}
            for item in items:
                item_kv = item.split( ':' )
                item_key = item_kv[0].strip()
                item_value = item_kv[1].strip()

                item_key_len = len( item_key )
                item_value_len = len( item_value )
                if current_module.has_key( item_key ):
                    if len( current_module[item_key] ) > 1 & isinstance( current_module[item_key][1] , int ):
                        max_len = current_module[item_key][1]
                else:
                    max_len = 0

                if item_key_len > item_value_len:
                    if item_key_len > max_len:
                        max_len = item_key_len
                else:
                    if item_value_len > max_len:
                        max_len = item_value_len

                current_module[item_key] = [item_value , max_len]
            modules.append( current_module )
    return modules

def show_memory_info( modules ):
    fields = modules[0].keys()
    field_width = {}
    for module in modules:
        for field in fields:
            if field_width.has_key( field ):
                if field_width[field] < module[field][1]:
                    field_width[field] = module[field][1]
            else:
                field_width[field] = module[field][1]
    ( head , head_fmt , data_fmt ) = gen_format( field_width )
    head_info = ( head_fmt % tuple( head ) )

    head_info = ' Seq |' + head_info      #append seq number
    data_fmt = '%(seq)4s |' + data_fmt    #append seq number

    head_len=len(head_info)
    print '-'*head_len
    print head_info
    print '-'*head_len
    seq_num=0                             #append seq number
    for module in modules:
        seq_num+=1                        #append seq number
        current_module_info = {}
        current_module_info['seq']=seq_num #append seq number
        for field in fields:
            current_module_info[field] = module[field][0]
        print data_fmt % current_module_info
    print '-'*head_len

def gen_format( field_width ):
    data_fmt = ''
    head_str_fmt = ''
    head = []
    for field , field_len in field_width.items():
        data_fmt += " %%(%s)%ds |" % ( field , field_len )
        head_str_fmt += " %%%ds |" % field_len
        head.append( field )
    return ( head , head_str_fmt.strip( '|' ).strip() , data_fmt.strip( '|').strip() )

if __name__  ==  "__main__":
    modules = get_memory_info()
    info = show_memory_info(modules)
